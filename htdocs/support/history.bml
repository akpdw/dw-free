<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=>Support Request History
body<=
<?_code
{
    use strict;
    use vars qw(%GET);

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $fullsearch = $remote->has_priv( 'supporthelp' );

    my $ret;
    if ($GET{user} || $GET{email} || $GET{userid}) {
        my $dbr = LJ::get_db_reader();
        return "Failed to get database handle."
            unless $dbr;

        my $reqlist;
        if ($GET{user} || $GET{userid}) {
            # get requests by a user, regardless of email (only gets user requests)
            my $userid = $GET{userid} ? $GET{userid}+0 : LJ::get_userid(LJ::trim($GET{user}));
            return "Invalid user to search on." unless $userid
                && ( $fullsearch || $remote->id == $userid );
            $ret .= "<h2>Viewing support requests for " .
                    LJ::ljuser( LJ::get_username( $userid ) ) . "</h2>\n";
            $reqlist = $dbr->selectall_arrayref(
                'SELECT spid, subject, state, spcatid, requserid, ' .
                       'timecreate, timetouched, timelasthelp, reqemail ' .
                'FROM support WHERE reqtype = \'user\' AND requserid = ?',
                undef, $userid);
        } elsif ($GET{email}) {
            # try by email, note that this gets requests opened by users and anonymous
            # requests, so we can view them all
            my $email = LJ::trim($GET{email});
            my %user_emails;

            unless ( $fullsearch ) {
                # check the list of allowable emails for this user
                my $query = "SELECT oldvalue FROM infohistory WHERE userid=? " .
                            "AND what='email' AND other='A'";
                my $rows = $dbr->selectall_arrayref( $query, undef, $remote->id );
                $user_emails{$_->[0]} = 1 foreach @$rows;
                $user_emails{$remote->email_raw} = 1 if $remote->email_status eq 'A';
            }

            return "Invalid email to search on." unless $email =~ /^.+\@.+$/
                && ( $fullsearch || $user_emails{$email} );
            $ret .= "<h2>Viewing support requests for " .
                    LJ::ehtml( $email ) . "</h2>\n";
            $reqlist = $dbr->selectall_arrayref(
                'SELECT spid, subject, state, spcatid, requserid, ' .
                       'timecreate, timetouched, timelasthelp, reqemail ' .
                'FROM support WHERE reqemail = ?',
                undef, $email);
        }

        if (@{$reqlist || []}) {
            # construct a list of people who have answered these requests
            my @ids;
            foreach (@$reqlist) {
                next unless $_->[2] eq 'closed';
                push @ids, $_->[0];
            }
            my $idlist = join ',', map { $_+0 } @ids;
            my $winners = $dbr->selectall_arrayref('SELECT sp.spid, u.user, sp.points FROM useridmap u, supportpoints sp ' .
                                                   "WHERE u.userid = sp.userid AND sp.spid IN ($idlist)");
            my %points;
            $points{$_->[0]+0} = [ $_->[1], $_->[2]+0 ] foreach @{$winners || []};

            # now construct the request blocks
            my %reqs;
            my @userids;
            foreach my $row (@$reqlist) {
                $reqs{$row->[0]} = {
                    spid => $row->[0],
                    winner => $points{$row->[0]}->[0],
                    points => $points{$row->[0]}->[1]+0,
                    subject => LJ::ehtml($row->[1]),
                    state => $row->[2],
                    spcatid => $row->[3],
                    requserid => $row->[4],
                    timecreate => $row->[5],
                    timetouched => $row->[6],
                    timelasthelp => $row->[7],
                    reqemail => LJ::ehtml($row->[8]),
                };
                push @userids, $row->[4] if $row->[4];
            }
            my $us = @userids ? LJ::load_userids(@userids) : undef;

            # get categories
            my $cats = LJ::Support::load_cats();

            $ret .= '<table><thead><tr><th>Summary</th><th>State</th><th>Answered By</th>' .
                    '<th>Category</th><th>Opened By</th><th>Time Opened</th></tr></thead>';
            foreach my $id (sort { $a <=> $b } keys %reqs) {
                # verify user can see this category (public_read or has supportread in it)
                next unless $cats->{$reqs{$id}->{spcatid}}{public_read} ||
                    LJ::Support::can_read_cat($cats->{$reqs{$id}->{spcatid}}, $remote);
                my $status = $reqs{$id}->{state} eq "closed" ? "closed" :
                             LJ::Support::open_request_status($reqs{$id}->{timetouched},
                                                              $reqs{$id}->{timelasthelp});

                # print out this request row
                $ret .= '<tr>';
                $ret .= "<td><a href=\"see_request?id=$reqs{$id}->{spid}\">$reqs{$id}->{subject}</a></td>\n";
                $ret .= "<td align='center'>$status</td>\n";
                $ret .= '<td align="center">';
                if ($reqs{$id}->{state} eq 'closed' && $reqs{$id}->{winner}) {
                    $ret .= LJ::ljuser($reqs{$id}->{winner}) . " ($reqs{$id}->{points})";
                } else {
                    $ret .= '-';
                }
                $ret .= "</td>\n";
                $ret .= "<td align='center'>$cats->{$reqs{$id}->{spcatid}}{catname}</td>\n<td align='center'>";
                $ret .= $reqs{$id}->{requserid} ? LJ::ljuser($us->{$reqs{$id}->{requserid}}) : $reqs{$id}->{reqemail};
                $ret .= "</td>\n<td align='center'>";
                $ret .= LJ::mysql_time($reqs{$id}->{timecreate});
                $ret .= "</td>\n";
                $ret .= '</tr>';
            }
            $ret .= '</table><br /><br />';
        } else {
            $ret .= "No results found for the search terms you entered.<br /><br />";
        }
    } else {
        return BML::redirect( "$LJ::SITEROOT/support/history?user=" . $remote->user )
            unless $fullsearch;
    }

    unless ( $fullsearch ) {
        # don't show full search form
        $ret .= "<h3>You may also search for requests from email addresses associated with your account.</h3>"
            if $GET{user};
        $ret .= "<form method='get' action='history'>";
        $ret .= "<label>Search by email:</label> <input type='text' name='email'>";
        $ret .= "<p><a href='$LJ::SITEROOT/support/history?user=" . $remote->user .
                "'>Back to account results</a></p>" if $GET{email};
        $ret .= "</form>";
        return $ret;
    }

    $ret .= "<table summary=''><tr><th colspan='2'>Search for Requests</th></tr>";
    $ret .= "<form method='get' action='history'>";
    $ret .= "<tr><td>By Email:</td><td><input type='text' name='email'></td></tr>";
    $ret .= "<tr><td>By Username:</td><td><input type='text' name='user'></td></tr>";
    $ret .= "<tr><td>By Userid:</td><td><input type='text' name='userid'></td></tr>";
    $ret .= "<tr><td colspan='2'><input type='submit' value='Perform Search'></td></tr>";
    $ret .= "<tr><td colspan='2'>Please fill out only one of the search fields.</td></tr>";
    $ret .= "</form></table>";
    return $ret;

}
_code?>
<=body
page?>
